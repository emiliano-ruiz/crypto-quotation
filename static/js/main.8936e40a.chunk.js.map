{"version":3,"sources":["cryptoimg.png","components/Error.jsx","hooks/useSelector.jsx","data/currencies.js","components/Form.jsx","hooks/useCurrency.js","hooks/useCrypto.js","components/Quotation.jsx","App.jsx","hooks/useQuotation.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorMessage","styled","p","Error","message","Select","select","Label","label","useSelector","data","useState","selection","setSelection","onChange","e","target","value","map","curr","key","SubmitButton","input","Form","onSubmit","currencies","currency","CurrencySelector","cryptos","setCryptos","useEffect","axios","get","then","r","newCryptos","Data","c","CoinInfo","Name","FullName","useCrypto","crypto","CryptoSelector","error","setError","quoteCurrency","preventDefault","type","Result","div","Info","Price","Quotation","quotation","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Heading","h1","Container","Imagen","img","App","conversion","setConversion","formData","FormData","append","URLSearchParams","DISPLAY","useQuotation","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8936e40a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptoimg.35f8cae9.png\";","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ErrorMessage = styled.p`\r\n  background-color: #b7322c;\r\n  padding: 1rem;\r\n  color: #FFF;\r\n  font-size: 30px;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nexport default function Error({message}) {\r\n  return message && (\r\n    <ErrorMessage>\r\n      {message}\r\n    </ErrorMessage>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  -webkit-appearence: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-family: \"Bebas Neue\", cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nexport default function useSelector(label, data) {\r\n  const [selection, setSelection] = useState(\"\");\r\n\r\n  function Selector() {\r\n    return (\r\n      <>\r\n        <Label>{label}</Label>\r\n        <Select\r\n          onChange={(e) => setSelection(e.target.value)}\r\n          value={selection}\r\n        >\r\n          <option value=\"\">- Select -</option>\r\n          {data.map((curr) => (\r\n            <option key={curr.key} value={curr.key}>\r\n              {curr.value}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return [selection, Selector];\r\n}\r\n","export default [\r\n  { key: \"ARS\", value: \"Argentine pesos\" },\r\n  { key: \"EUR\", value: \"Euros\" },\r\n  { key: \"GBP\", value: \"British pounds sterling\" },\r\n  { key: \"MXN\", value: \"Mexican pesos\" },\r\n  { key: \"USD\", value: \"US dollars\" },\r\n  { key: \"CAD\", value: \"Canadian dollars\" },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport Error from \"../components/Error\";\r\nimport styled from \"@emotion/styled\";\r\nimport useCrypto from \"../hooks/useCrypto\";\r\nimport useCurrency from \"../hooks/useCurrency\";\r\n\r\nconst SubmitButton = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color #fff;\r\n  transition: background-color .3s ease;\r\n\r\n  &:hover {\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default function Form({ onSubmit }) {\r\n\r\n  const [currency, CurrencySelector] = useCurrency();\r\n  const [crypto, CryptoSelector] = useCrypto();\r\n  const [error, setError] = useState(null);\r\n\r\n  const quoteCurrency = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!currency || !crypto) {\r\n      setError(\"All fields are required\");\r\n      return;\r\n    }\r\n\r\n    onSubmit({ currency, crypto });\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={(e) => quoteCurrency(e)}>\r\n      <CurrencySelector />\r\n      <CryptoSelector />\r\n      <SubmitButton type=\"submit\" value=\"Calculate\" />\r\n      <Error message={error} />\r\n    </form>\r\n  );\r\n}\r\n","import currencies from \"../data/currencies\";\r\nimport useSelector from \"./useSelector\";\r\n\r\nexport default function useCurrency() {\r\n  return useSelector(\"Currency\", currencies);\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport useSelector from \"./useSelector\";\r\n\r\nexport default function useCrypto() {\r\n  const [cryptos, setCryptos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get( \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\")\r\n      .then((r) => {\r\n        const newCryptos = r.data.Data.map((c) => {\r\n          return {\r\n            key: c.CoinInfo.Name,\r\n            value: c.CoinInfo.FullName,\r\n          };\r\n        });\r\n        setCryptos(newCryptos);\r\n      });\r\n  }, []);\r\n\r\n  return useSelector(\"Crypto\", cryptos);\r\n}\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Result = styled.div`\r\n  color: #FFF;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n  font-size: 18px;\r\n`;\r\n\r\nconst Price = styled.p`\r\n  font-size: 30px;\r\n`;\r\n\r\nexport default function Quotation({quotation}) {\r\n\r\n  if (Object.keys(quotation).length === 0)\r\n    return null;\r\n\r\n  return (\r\n    <Result>\r\n      <Price>Price is: <b>{quotation.PRICE}</b></Price>\r\n      <Info>Max today: {quotation.HIGHDAY}</Info>\r\n      <Info>Min today: {quotation.LOWDAY}</Info>\r\n      <Info>Change 24hs: {quotation.CHANGEPCT24HOUR}%</Info>\r\n      <Info>Updated: {quotation.LASTUPDATE}</Info>\r\n    </Result>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport img from \"./cryptoimg.png\";\nimport styled from \"@emotion/styled\";\nimport Quotation from \"./components/Quotation\";\nimport useQuotation from \"./hooks/useQuotation\";\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nconst Container = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nexport default function App() {\n  const [conversion, setConversion] = useState({ currency: \"\", crypto: \"\" });\n  const quotation = useQuotation(conversion.currency, conversion.crypto);\n\n  return (\n    <Container>\n      <div>\n        <Imagen src={img} alt=\"cryptoimg.png\" />\n      </div>\n      <div>\n        <Heading>Real time quotation</Heading>\n        <Form onSubmit={(c) => setConversion(c)} />\n        <Quotation quotation={quotation} />\n      </div>\n    </Container>\n  );\n}\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function useQuotation(currency, crypto) {\r\n  const [conversion, setConversion] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (!currency || !crypto) return;\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"fsyms\", crypto);\r\n    formData.append(\"tsyms\", currency);\r\n\r\n    axios\r\n      .get(\r\n        `https://min-api.cryptocompare.com/data/pricemultifull?${new URLSearchParams(\r\n          formData\r\n        )}`\r\n      )\r\n      .then((r) => setConversion(r.data.DISPLAY[crypto][currency]));\r\n  }, [currency, crypto]);\r\n\r\n  return conversion;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}